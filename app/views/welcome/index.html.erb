<html>
  <head>
    <%= include_gon %>
    <link rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.css" type="text/css">
    <script src="/js/libs/d3/d3.min.js"></script>
    <script src="/js/libs/d3pie/d3pie.js"></script>
    <script src="/js/libs/nvd3/nv.d3.min.js"></script>
    <script src="/js/ReportData.js"></script>
    <script src="/js/Report_BarChart.js"></script>
    <script src="/js/Report_PieChart.js"></script>
    <script src="/js/Relationships.js"></script>
    <script src="/js/Themes.js"></script>
    <script src="/js/CameraPin.js"></script>
    <script src="/js/PinData.js"></script>
    <script src="/js/PinUI.js"></script>
    <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/viewer3D.min.js"></script>
    <script>
      var _viewerMain = null;     
      var _savedGlobalCamera = null;
      var _viewerSecondary = null;  
      var _blockEventMain = false;
      var _blockEventSecondary = false;     
      var _savedViewerStates = [];    
      var token = gon.token
      var urn = gon.urn
      var _loadedDocument = null
      var _views2D = null;
      var _views3D = null;
      $(document).ready(function () {
          if(window.location.href.indexOf("urn") > -1) {
              urn = window.location.href.substring(window.location.href.indexOf("urn")+4);
          }   
      });

      function getToken() {
          console.log(token)
          return token;
      }

    function loadViewMenuOptions() {
        var sel = $("#pu_viewToLoad");
        
        sel.find("option").remove().end();

        $.each(_views3D, function(i, item) {
            sel.append($("<option>", { 
                value: i,
                text : item.name 
            }));
        });
        
        sel.append($("<option disabled>─────────────────</option>"));
        $.each(_views2D, function(i, item) {
            sel.append($("<option>", { 
                value: i + 1000,
                text : item.name 
            }));
        });
    }

    $("#pu_viewToLoad").change(function(evt) {  
        evt.preventDefault();
         
        var index = parseInt($("#pu_viewToLoad option:selected").val(), 10);
         
        if (index >= 1000) { 
            index -= 1000;
            console.log("Changing to 2D view: " + _views2D[index].name);
            switchSheet();
            loadView(_viewerSecondary, _views2D[index]);
        }
        else {
            console.log("Changing to 3D view: " + _views3D[index].name);
            switchSheet();
            loadView(_viewerSecondary, _views3D[index]);
        }
    });

    function switchSheet() {
        
        if (_viewerSecondary !== null) {
            _viewerSecondary.tearDown(); 
        }
        _viewerSecondary.setUp();
    }    

    function initializeViewerMain() {
        console.log('----------------------------------------------------')
      if (_viewerMain !== null) {
          _viewerMain.uninitialize();
          _viewerMain = null;
      }

      var viewerElement = document.getElementById("viewer");
        _viewerMain = new Autodesk.Viewing.Private.GuiViewer3D(viewerElement, {});
       
        var retCode = _viewerMain.initialize();
        if (retCode !== 0) {
            alert("ERROR: Couldn't initialize main viewer!");
            console.log("ERROR Code: " + retCode); 
        }

        disableReportMenu();
        _viewerMain.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, function (event) {
            enableReportMenu();            
            $("#tab_button_1").click();
            startReportDataLoader(runReport);
        });
        
        _viewerMain.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, function (event) {        
            if (_blockEventSecondary)
                return;
            
                // if a single item selected in 3D, select that same item in 2D.
            var curSelSetMain = _viewerMain.getSelection();
            //if (curSelSetMain.length === 1) {
                _blockEventMain = true;
                _viewerSecondary.select(curSelSetMain)//select objects in secondary view
                _blockEventMain = false;
            //}
        });
    }    

    function initializeViewerSecondary() {
        console.log('=====================SECONDARY VIEW==============')
            // if we already have something loaded, uninitialize and re-init (can't just load a new file!:  ?? is that a bug?)
        if (_viewerSecondary !== null) {
            _viewerSecondary.uninitialize();
            _viewerSecondary = null;
        }

        var viewerElement = document.getElementById("viewerSecondary");  // placeholder in HTML to stick the viewer
        _viewerSecondary = new Autodesk.Viewing.Private.GuiViewer3D(viewerElement, {});
       
        var retCode = _viewerSecondary.initialize();
        if (retCode !== 0) {
            alert("ERROR: Couldn't initialize secondary viewer!");
            console.log("ERROR Code: " + retCode);      // TBD: do real error handling here
        }
        
            // when selecting objects in the Secondary viewer, also select the matching itmes in the Primary viewer
        _viewerSecondary.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, function (event) {
            if (_blockEventMain)
                return;
                    
                // if a single item, select and isolate same thing in 3D.
            var curSelSetSecondary = _viewerSecondary.getSelection();
            if (curSelSetSecondary.length === 1) {            
                _blockEventSecondary = true;
                
                //_viewerMain.clearSelection();   // reset to nothing selected (otherwise we end up in cases where it just adds to the existing selection)
                
                    // normal behavior is to isolate and zoom into the selected object, but we can only do that in 3D.
                if (_viewerMain.model.is2d() == false) {
                    _viewerMain.select(curSelSetSecondary);
                    _viewerMain.isolate(curSelSetSecondary);
                    _viewerMain.fitToView(curSelSetSecondary);
                }
                else {
                    _viewerMain.select(curSelSetSecondary);   // Call work-around to select objects in secondary view (see file TestFuncs.js)
                    _viewerMain.fitToView(curSelSetSecondary);
                }
                
                _blockEventSecondary = false;
            }
        });
        
            // when we change sheets, we want to re-select things after this sheet is loaded
        _viewerSecondary.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, function (event) {
            _blockEventMain = true; // prevent normal event of select/isolate/fit in main viewer
            _viewerSecondary.select(_viewerMain.getSelection());
            _blockEventMain = false;
        });
    }    

    function loadDocument(urnStr) {
        _loadedDocument = null
        if (!urnStr || (0 === urnStr.length)) {
          alert("You must specify a URN!");
          return;
        }      

        var fullUrnStr = "urn:" + urnStr;
        // Find the first 3d geometry and load that.
        Autodesk.Viewing.Document.load(fullUrnStr, function(doc) {
          _loadedDocument = doc
          var geometryItems = [];
          _views3D = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {
            'type' : 'geometry',
            'role' : '3d'
          }, true);

          _views2D = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {
            'type' : 'geometry',
            'role' : '2d'
          }, true);          

          loadViewMenuOptions(); 
          initializeViewerMain();
          initializeViewerSecondary();
            // load up first 3D view by default into the primary viewer
        if (_views3D.length > 0) {
            loadView(_viewerMain, _views3D[0]);  
            //viewer.load(doc.getViewablePath(_views3D[0])); 
        }
        else {      // there weren't any 3D views!
            if (_views2D.length > 0) {
                loadView(_viewerMain, _views2D[0]);
                //viewer.load(doc.getViewablePath(_views2D[0])); 
                $('#pu_viewToLoad').val('1000'); // selects first option in 2D list
            }
            else {
                alert("ERROR: No 3D or 2D views found in this drawing!");
            }
        }
            // now load the Secondary viewer with the first 2D view by default
        if (_views2D.length > 0) {
            loadView(_viewerSecondary, _views2D[0]);
             //viewer.load(doc.getViewablePath(_views2D[0])); 
            $('#pu_viewToLoad').val('1000'); // selects first option in 2D list
        }
        else {
            console.log("WARNING: No 2D views found for secondary view, using additional 3D view");
            if (_views3D.length > 0)
               loadView(_viewerSecondary, _views3D[0]);
             //viewer.load(doc.getViewablePath(_views3D[0])); 
        }


        // if (geometryItems.length > 0) {
        //     viewer.load(doc.getViewablePath(geometryItems[0]));
        // }
     }, function(errorMsg) {// onErrorCallback
        alert("Load Error: " + errorMsg);
        });
    }

    function loadViewSuccessFunc()
    {
        console.log("Loaded viewer successfully with given asset...");
    }

    function loadViewErrorFunc()
    {
        console.log("ERROR: could not load asset into viewer...");
    }

        // load a particular viewable into the viewer (either Primary or Secondary depending on what's passed in)
    function loadView(viewer, viewObj) {
        console.log('==================THIS IS TEST================')
        var path = _loadedDocument.getViewablePath(viewObj);

        console.log("Loading view URN: " + path);
        
        console.log('=======================viewObj=================')
        console.log(viewObj)
        console.log('=========================VIEWER================')
        console.log(viewer)
        viewer.load(path, _loadedDocument.getPropertyDbPath(), loadViewSuccessFunc, loadViewErrorFunc);
    }    
    
    function initialize() {
        var options = {
            'document' : 'urn:' + urn,
            'env':'AutodeskProduction',
            'getAccessToken': getToken,
            'refreshToken': getToken,
            };
        Autodesk.Viewing.Initializer(options,function() {
            loadDocument(urn);
        });
    }
    
    initialize();
    </script>
</head>
<body onload="initialize();">
    <div id="nav-bar" class="navbar navbar-default app-navbar">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
        </div>
        <div class="navbar-nav-large navbar-collapse collapse" id="navbar-user">
          <ul class="nav navbar-nav">
            <div class="col-md-12">
                <div class="col-md-2">
                    <h4>DPR</h4><em>CONSTRUCTION</em>
                </div>
                <div class="col-md-3"></div>
                <div class="col-md-7">
                    <h5 class="pull-right">San Francisco Office</h5>
                </div>
            </div>
          </ul>
        </div>
      </div>
    </div>

    <div class="page-heading">
    <div class="page-heading-cell">
      <h6>
        Viewer
      </h6>
    </div>
    <div class="page-heading-cell">
      <label for="pu_viewToLoad">Views</label>
      <select id="pu_viewToLoad" class="select-dark" name="viewToLoad">
          <!-- Options filled in by function in LoadModel.js -->
      </select>
    </div>
    </div>

 <div class="project-info-column">
    <ul class="tab-buttons magrin-none">
      <li class="tab-button active">
          <a href="#"><span>Reports</span></a>
      </li>
      <li class="tab-button">
          <a href="#"><span>Filters</span></a>
      </li>
      <li class="tab-button">
          <a href="#"><span>Relationships</span></a>
      </li>
      <li class="tab-button">
          <a href="#"><span>Documents</span></a>
      </li>
    </ul>
  </div>

<!-- 3D Model Viewer -->
  <div class="project-container group">
    <div class="project-view-column">
      <div id="viewer">

      </div>
    </div>
  </div>

  <!-- 2D Model Viewer -->
  <div class="project-container group">
      <div class="project-view-column">
        <div id="viewerSecondary">

        </div>
    </div>
  </div>

</body>
</html>
